数据分析库：
	pandas、
	numpy、
	matplotlib 生成二维图

numpy

In [3]: import numpy as np

In [4]: data1 = [1,2.0,3,4,5]

In [5]: np_arr = np.shape

In [7]: np_arr = np.array(data1)

In [8]: np_arr.shape
Out[8]: (5,)

In [9]: np_arr.dtype
Out[9]: dtype('float64')

数组的子数据长度不同，那它的shape和dtype也会有所变化
data = [[1,2,3],[4,5,6,7]]

In [5]: np_arr = np.array(data)

In [6]: np_arr
Out[6]: array([list([1, 2, 3]), list([4, 5, 6, 7])], dtype=object)

In [7]: np_arr.shape
Out[7]: (2,)

In [8]: np_arr.dtype
Out[8]: dtype('O')


两个数组的长度相同，是可以算数运算的，是对两个数组的相对应的位置进行算数运算
In [9]: arr = numpy.array([[0,4,3],[2,5,8]])

In [10]: arr1 = numpy.array([[1,2,3],[4,5,6]])

In [11]: arr>arr1
Out[11]:
array([[False,  True, False],
       [False, False,  True]])
	   
	   
两个数组的长度不同，是无法进行算数运算的
In [12]: arr>np_arr
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-12-6bf9c640136f> in <module>
----> 1 arr>np_arr

ValueError: operands could not be broadcast together with shapes (2,3) (2,)

In [13]: np_arr>arr
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-13-33a528911def> in <module>
----> 1 np_arr>arr

ValueError: operands could not be broadcast together with shapes (2,) (2,3)

In [14]: np_arr*arr
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-14-1c5b9e8c6535> in <module>
----> 1 np_arr*arr

ValueError: operands could not be broadcast together with shapes (2,) (2,3)


与列表切片的区别，numpy的数据进行切片后可以直接赋值，赋值完成后会修改原来的数值，而列表不可以切片赋值，单个赋值也不会修改原来的列表

In [2]: ann = np.arange(10)

In [3]: ann
Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [4]: ann[5:8]=12

In [5]: ann
Out[5]: array([ 0,  1,  2,  3,  4, 12, 12, 12,  8,  9])

In [6]: an = list(range(10))

In [7]: an
Out[7]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

In [8]: an[5:8]
Out[8]: [5, 6, 7]

In [9]: an[5:8]=12
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-9-e19fe46db76b> in <module>
----> 1 an[5:8]=12

TypeError: can only assign an iterable

In [10]: an_slice = an[5:8]

In [11]: an_slice[1]=12

In [12]: an
Out[12]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

嵌套数组切片获得指定的元素，比如获取元素‘2’
In [2]: data = [[1,2,3],[4,5,6],[7,8,9]]

In [3]: arr = np.array(data)

In [4]: arr
Out[4]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [5]: arr[2]
Out[5]: array([7, 8, 9])

In [6]: arr[0,1]
Out[6]: 2
嵌套数组切片获得指定的元素，比如获取元素‘2’
In [8]: arr1 = np.array([[[1,2,3],[4,5,6]],[[7,8,9],[10,11,12]]]
   ...: )

In [9]: arr1
Out[9]:
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])

In [10]: arr1[0]
Out[10]:
array([[1, 2, 3],
       [4, 5, 6]])

In [11]: arr1[0,0]
Out[11]: array([1, 2, 3])

In [12]: arr1[0,0,1]
Out[12]: 2




多维数组切片

In [13]: arr1
Out[13]:
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])

In [14]: arr2 = arr1.copy()

In [15]: arr2
Out[15]:
array([[[ 1,  2,  3],
        [ 4,  5,  6]],

       [[ 7,  8,  9],
        [10, 11, 12]]])

In [16]: arr1[0]=12

In [17]: arr1
Out[17]:
array([[[12, 12, 12],
        [12, 12, 12]],

       [[ 7,  8,  9],
        [10, 11, 12]]])

In [18]: arr2[:1]
Out[18]:
array([[[1, 2, 3],
        [4, 5, 6]]])

In [19]: arr2[0]
Out[19]:
array([[1, 2, 3],
       [4, 5, 6]])

In [20]: arr2[:1,:]
Out[20]:
array([[[1, 2, 3],
        [4, 5, 6]]])

In [21]: arr2[:1,0:1]
Out[21]: array([[[1, 2, 3]]])

In [22]: arr2[:1,0:2]
Out[22]:
array([[[1, 2, 3],
        [4, 5, 6]]])

In [23]: arr2[:1,0:3]
Out[23]:
array([[[1, 2, 3],
        [4, 5, 6]]])

In [25]: arr2[:1,1:2]
Out[25]: array([[[4, 5, 6]]])

In [26]: arr2[:1,1:2,0:2]
Out[26]: array([[[4, 5]]])

布尔索引

In [2]: names = np.array(['Tom','Jack','Bob','Cral','Jack'])

In [3]: names
Out[3]: array(['Tom', 'Jack', 'Bob', 'Cral', 'Jack'], dtype='<U4')

In [4]: names.dtype
Out[4]: dtype('<U4')

In [5]: data = np.array([['Tall','Shy'],['Handsome','Kind'],['Popular','Coo
   ...: l'],['Childish','Outstanding'],['Erudite','Smart']])

In [6]: data.dtype
Out[6]: dtype('<U11')

In [7]: names=='Jack'
Out[7]: array([False,  True, False, False,  True])

In [8]: data[names=='Jack']
Out[8]:
array([['Handsome', 'Kind'],
       ['Erudite', 'Smart']], dtype='<U11')

In [9]: data[names!='Jack']
Out[9]:
array([['Tall', 'Shy'],
       ['Popular', 'Cool'],
       ['Childish', 'Outstanding']], dtype='<U11')

In [11]: data[~(names=='Jack')]  取反
Out[11]:
array([['Tall', 'Shy'],
       ['Popular', 'Cool'],
       ['Childish', 'Outstanding']], dtype='<U11')


神奇索引（难以理解）

In [12]: arr = np.arange(12).reshape(3,4)

In [13]: arr
Out[13]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

In [14]: arr[[2,0]]
Out[14]:
array([[ 8,  9, 10, 11],
       [ 0,  1,  2,  3]])

In [15]: arr[[2,0],[3,1]]
Out[15]: array([11,  1])

转置，类似于矩阵

In [8]: arr = np.arange(10).reshape(2,5)

In [9]: arr
Out[9]:
array([[0, 1, 2, 3, 4],
       [5, 6, 7, 8, 9]])

In [10]: arr.T
Out[10]:
array([[0, 5],
       [1, 6],
       [2, 7],
       [3, 8],
       [4, 9]])

transpose方法:多维度数组从外到内它的维度分别是0,1,2.....,而transpose方法就是改变其维度，比如说data = np.arange(30).reshape(2,3,5)
生成的数组0维度->2,1维度->3,2维度->5,而使用transpose((1,0,2))方法后数组变为0维度->3,1维度->2,2维度->5
In [2]: data = np.arange(30).reshape(2,3,5)

In [3]: data
Out[3]:
array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  7,  8,  9],
        [10, 11, 12, 13, 14]],

       [[15, 16, 17, 18, 19],
        [20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])

In [4]: data.transpose((1,0,2))
Out[4]:
array([[[ 0,  1,  2,  3,  4],
        [15, 16, 17, 18, 19]],

       [[ 5,  6,  7,  8,  9],
        [20, 21, 22, 23, 24]],

       [[10, 11, 12, 13, 14],
        [25, 26, 27, 28, 29]]])

In [5]: data.transpose((0,1,2))
Out[5]:
array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  7,  8,  9],
        [10, 11, 12, 13, 14]],

       [[15, 16, 17, 18, 19],
        [20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])
		
		
swapaxes方法与transpose 方法类似

In [11]: data.swapaxes(0,1)
Out[11]:
array([[[ 0,  1,  2,  3,  4],
        [15, 16, 17, 18, 19]],

       [[ 5,  6,  7,  8,  9],
        [20, 21, 22, 23, 24]],

       [[10, 11, 12, 13, 14],
        [25, 26, 27, 28, 29]]])




nan 需要注意
np.nan == np.nan:
 false
 
np.nan is np.nan:
 true

inf  表示无限大



二、pandas（Series数据类型，pandas数据类型）

在pandas中，Nan的数据类型为float,所以一旦出现Nan，那整个数据的数据类型则为float

Series数据类型，类似一维数组，当只有一个数组时，index默认生成，与字典类似（index-Values），但是字典的key是不可变的，而Series的index是可变的，

当series的索引为整数时，使用loc(),iloc()两个函数来切片，分别表示标签和索引。

In [1]: import numpy as np

In [2]: import pandas as pd

In [3]: from pandas import Series,DataFrame

In [4]: data = Series([1,2,3,4],['a','b','c','d'])

In [5]: data
Out[5]:
a    1
b    2
c    3
d    4
dtype: int64

In [6]: data1 = Series(['a','b','c','d'])

In [7]: data1
Out[7]:
0    a
1    b
2    c
3    d
dtype: object

Series的index与valuse方法
In [16]: data3 = {1:'a',2:'b',3:'c'}

In [17]: dataser = Series(data3)

In [18]: dataser
Out[18]:
1    a
2    b
3    c
dtype: object

获取数组的index
In [20]: dataser.index
Out[20]: Int64Index([1, 2, 3], dtype='int64')

获取数组的values
In [22]: dataser.values
Out[22]: array(['a', 'b', 'c'], dtype=object)

对索引进行判断，判断索引是否在数组中
In [23]: 'a' in dataser
Out[23]: False

In [24]: 1 in dataser
Out[24]: True

Series生成Nan
In [25]: index1 = ['a','b','c','d']

In [28]: data = {'a':1,'b':2,'c':3}

In [29]: dataser2 = Series(data,index = index1)

In [30]: dataser2
Out[30]:
a    1.0
b    2.0
c    3.0
d    NaN
dtype: float64

查询判断Nan
In [33]: dataser2.isnull()
Out[33]:
a    False
b    False
c    False
d     True
dtype: bool


In [35]: dataser2.notnull()
Out[35]:
a     True
b     True
c     True
d    False
dtype: bool

嵌套查询Nan
In [36]: dataser2[dataser2.isnull()==True]
Out[36]:
d   NaN
dtype: float64

统计非Nan的个数
In [37]: dataser2.count()
Out[37]: 3

Series的name属性
In [38]: dataser
Out[38]:
1    a
2    b
3    c
dtype: object

In [39]: dataser.index.name = 'abc'

In [40]: dataser.name = 'test'

In [41]: dataser
Out[41]:
abc
1    a
2    b
3    c
Name: test, dtype: object

在算术运算中，Series会自动寻找匹配的index值进行运算，如果index不存在匹配则自动赋予NaN,值得注意的是，
任何数+NaN=NaN,你可以把NaN理解为吸收一切的黑洞。
案例一
In [42]: dataser
Out[42]:
abc
1    a
2    b
3    c
Name: test, dtype: object

In [43]: dataser2
Out[43]:
a    1.0
b    2.0
c    3.0
d    NaN
dtype: float64

In [44]: dataser+dataser2
Out[44]:
1    NaN
2    NaN
3    NaN
a    NaN
b    NaN
c    NaN
d    NaN
dtype: object

案例二

In [45]: data = Series([1,2,3,4])

In [46]: data
Out[46]:
0    1
1    2
2    3
3    4
dtype: int64

In [48]: data2 = {0:1,1:2,2:3}

In [49]: index1 = [0,1,2,3]

In [50]: datas = Series(data2,index1)

In [51]: datas
Out[51]:
0    1.0
1    2.0
2    3.0
3    NaN
dtype: float64

加
In [52]: datas+data
Out[52]:
0    2.0
1    4.0
2    6.0
3    NaN
dtype: float64

乘
In [53]: data*datas
Out[53]:
0    1.0
1    4.0
2    9.0
3    NaN
dtype: float64

减
In [54]: data-datas
Out[54]:
0    0.0
1    0.0
2    0.0
3    NaN
dtype: float64

除
In [56]: data/datas
Out[56]:
0    1.0
1    1.0
2    1.0
3    NaN
dtype: float64

取余
In [58]: data%datas
Out[58]:
0    0.0
1    0.0
2    0.0
3    NaN
dtype: float64







DataFrame数据类型，类似于二维数据，key为列的标题（索引）

In [11]: data2 = {1:['a','b','c'],2:['d','e','f'],3:['g','h','i']}

In [12]: DataFrame(data2)
Out[12]:
   1  2  3
0  a  d  g
1  b  e  h
2  c  f  i

DataFrame对象的index、values、columns方法

In [5]: data = {'name':['华为','苹果','小米'],'price':[5000,8000,3000]}

In [6]: dataD = DataFrame(data)

In [7]: dataD
Out[7]:
  name  price
0   华为   5000
1   苹果   8000
2   小米   3000

In [8]: dataD.index
Out[8]: RangeIndex(start=0, stop=3, step=1)

In [9]: dataD.values
Out[9]:
array([['华为', 5000],
       ['苹果', 8000],
       ['小米', 3000]], dtype=object)
	   
In [9]: dataD.columns
Out[9]: Index(['name', 'price'], dtype='object')

获取DataFrame的指定列数据，类似于字典  data = {'name':['华为','苹果','小米'],'price':[5000,8000,3000]}
In [11]: dataD.name
Out[11]:
0    华为
1    苹果
2    小米
Name: name, dtype: object

In [13]: dataD['name']
Out[13]:
0    华为
1    苹果
2    小米
Name: name, dtype: object

In [12]: dataD.price
Out[12]:
0    5000
1    8000
2    3000
Name: price, dtype: int64


iloc查询 行 标签内容 [index] -->index表示多少行，如果行不存在会报错
In [17]: dataD.iloc[0]
Out[17]:
name       华为
price    5000
Name: 0, dtype: object

In [18]: dataD.iloc[1]
Out[18]:
name       苹果
price    8000
Name: 1, dtype: object

In [19]: dataD.iloc[2]
Out[19]:
name       小米
price    3000
Name: 2, dtype: object

增加列
In [22]: dataD['type']=['华为mate','iphone X','小米8']

In [23]: dataD
Out[23]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone X
2   小米   3000       小米8

In [28]: dataD['test'] = None

In [29]: dataD
Out[29]:
  name  price      type  test
0   华为   5000    华为mate  None
1   苹果   8000  iphone X  None
2   小米   3000       小米8  None

添加行
In [31]: dataD.loc[3]=['vivo',2800,'vivo x8',None]

In [32]: dataD
Out[32]:
   name  price      type  test
0    华为   5000    华为mate  None
1    苹果   8000  iphone X  None
2    小米   3000       小米8  None
3  vivo   2800   vivo x8  None

删除列、行
In [33]: del dataD['test']

In [35]: dataD
Out[35]:
   name  price      type
0    华为   5000    华为mate
1    苹果   8000  iphone X
2    小米   3000       小米8
3  vivo   2800   vivo x8


In [37]: dataD.drop(3)或者dataD.drop([3])    需要注意的是这里的返回值不是视图，而是copy
Out[37]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone X
2   小米   3000       小米8

In [38]: dataD                               再次调用的返回值才是视图
Out[38]:
   name  price      type
0    华为   5000    华为mate
1    苹果   8000  iphone X
2    小米   3000       小米8
3  vivo   2800   vivo x8

如果想要在原数据中删除行，则要加inplace = True

In [39]: dataD.drop([3],inplace=True)

In [40]: dataD
Out[40]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone X
2   小米   3000       小米8

设置某列为index，这里加inplace=True与上同理
In [47]: dataD.set_index('name',inplace=True)

In [48]: dataD
Out[48]:
      price      type
name
华为     5000    华为mate
苹果     8000  iphone X
小米     3000       小米8

返回默认的index
In [49]: dataD.reset_index(inplace=True)

In [50]: dataD
Out[50]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone X
2   小米   3000       小米8

丢弃缺失数据行（NaN）dropna()默认参数为dropna(axis=0,how=any)0表示x轴，any表示任意，axis=（0,1），how=（any，all）
In [72]: dataD.dropna()    返回值为copy，与上同理

填充缺失数据为10
In [73]: dataD.fillna(10)  返回值为copy，与上同理

数据合并

In [90]: datas
Out[90]:
       type name
0    华为mate   华为
1  iphone x   苹果

In [92]: dataD
Out[92]:
   name  price
0    华为   5000
1    苹果   8000
2    小米   3000
3  vivo   2800

In [93]: pd.merge(dataD,datas,on='name',how='left')  以name为key进行左连接(以左边的位基准)
Out[93]:
   name  price      type
0    华为   5000    华为mate
1    苹果   8000  iphone x
2    小米   3000       NaN
3  vivo   2800       NaN

In [94]: pd.merge(dataD,datas,on='name',how='right') 以name为key进行右连接(以右边的位基准)
Out[94]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone x


去掉重复值
不指定字段，去掉重复的行
In [116]: pd_m
Out[116]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone x
2   小米   3000       NaN
3   小米   3000       NaN

In [117]: pd_m.drop_duplicates(inplace=True)

In [118]: pd_m
Out[118]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone x
2   小米   3000       NaN


指定字段，去掉重复的行
In [102]: pd_m
Out[102]:
   name  price      type
0    华为   5000    华为mate
1    苹果   8000  iphone x
2    小米   3000       NaN
3  vivo   3000       NaN

In [104]: pd_m.drop_duplicates('price',inplace=True)

In [105]: pd_m
Out[105]:
  name  price      type
0   华为   5000    华为mate
1   苹果   8000  iphone x
2   小米   3000       NaN


pandas常用函数

sort_values(by='',ascending=True)按照某一列或者行的值进行排序
sort_index(ascending=True)按照标签排序
date_range(start,stop,periods,freq)  start、stop起止时间,periods长度，freq频率

pandas读取文件
read_csv(file,header,)        读取出的数据以逗号分隔
read_table()      读取出的数据以制表符分隔




matplotlib

xlabel为横坐标标题
如果在plot中加label(生成的图像中线的名称)参数,则后面一定要调用legend

import numpy as np
import matplotlib.pyplot as plt
x = np.arange(20)
plt.xlabel('x')
plt.ylabel('y')
plt.plot(x,x,'r-o',label='y=x')
plt.plot(x,x**2,'g-x',label='y=x^2')
plt.plot(x,3*x**3+5*x**2+2*x+1,'y--',label='3x^3+5x^2+2x+1')
plt.legend()
plt.show()

子图
import numpy as np
import matplotlib.pyplot as plt
fig = plt.figure()   生成画布
ax = fig.add_subplot(2,2,2)  图像显示在四个格子中的第二个格子,第一个2代表纵向的2个，第二个代表横向的2个
ax.plot([1,2,3],[4,5,6])
fig.show()

柱状图、饼图

import numpy as np
import matplotlib.pyplot as plt
label = ['a','b','c']
plt.bar([1,2,3],[4,5,6],width=[0.3,0.4,0.5])
plt.xticks([1,2,3],label,color='red')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
plt.pie([10,20,30,40],labels=['a','b','c','d'],autopct='%.2f%%',explode=[0,0,0.1,0])
#plt.axis('equal')
plt.show()

k线图







import pandas as pd
data = pd.read_csv('C:/Users/zgd/Desktop/000016.csv',index_col='date',parse_dates=['date'])[['open','close','high','low']]
data_m = data.resample('M').first()
data_y = data.resample('A').last()
cost_money = 0
own = 0
for year in range(2016,2020):
    cost_money += data_m[str(year)]['open'].sum()*100
    own += len(data_m[str(year)]['open'])*100
    if year != 2019:
        cost_money -= data_y[str(year)]['open'][0]*own*100
        own = 0
price = data['2019']['open'][-1]
cost_money -= price*own
print(cost_money)









